
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∑–∞–ø–∞—Å–∞–º–∏
–í–µ—Ä—Å–∏—è 1.0

–ê–≤—Ç–æ—Ä: AI Assistant
–û–ø–∏—Å–∞–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –°–∞–Ω–∞—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è out-of-stock —Å–∏—Ç—É–∞—Ü–∏–π
"""

import pandas as pd
import numpy as np
import streamlit as st
from typing import Dict, List, Tuple, Optional
import io
import warnings
from excel_processor import ExcelDataProcessor
warnings.filterwarnings('ignore')

class InventoryAutomationSystem:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤"""
    
    def __init__(self):
        self.processor = ExcelDataProcessor()
        self.category_analysis = None
        self.space_distribution = None
        self.min_stock_data = None
        self.orders_data = None
        
    def load_excel_data(self, uploaded_file) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
            with open("temp_data.xlsx", "wb") as f:
                f.write(uploaded_file.getvalue())
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            structure_info = self.processor.load_excel_file("temp_data.xlsx")
            
            st.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            with st.expander("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                for sheet_name, info in structure_info.items():
                    st.write(f"**{sheet_name}**: {info['rows']} —Å—Ç—Ä–æ–∫, {info['columns']} –∫–æ–ª–æ–Ω–æ–∫")
                    if info['column_names']:
                        st.write(f"–ö–æ–ª–æ–Ω–∫–∏: {', '.join(info['column_names'][:10])}{'...' if len(info['column_names']) > 10 else ''}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            try:
                ads_df = self.processor.process_ads_data()
                st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã ADS –¥–∞–Ω–Ω—ã–µ: {len(ads_df)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è ADS –¥–∞–Ω–Ω—ã–µ: {str(e)}")
            
            try:
                stock_df = self.processor.process_stock_data()
                st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stock_df)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {str(e)}")
            
            try:
                target_df = self.processor.process_min_target_data()
                st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã min-target –¥–∞–Ω–Ω—ã–µ: {len(target_df)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Min-target –¥–∞–Ω–Ω—ã–µ: {str(e)}")
            
            return True
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return False
    
    def analyze_categories(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –¥–æ–ª–µ–π"""
        try:
            self.category_analysis = self.processor.calculate_category_analysis()
            return self.category_analysis
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
            return {}
    
    def calculate_space_distribution(self, total_shelves: int) -> Dict:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        if not self.category_analysis:
            return {}
        
        try:
            self.space_distribution = self.processor.calculate_space_distribution(
                total_shelves, self.category_analysis
            )
            return self.space_distribution
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {str(e)}")
            return {}
    
    def calculate_minimum_stock(self, days_supply: int = 10) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç –Ω–µ—Å–Ω–∏–∂–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞"""
        try:
            self.min_stock_data = self.processor.calculate_minimum_stock(days_supply)
            return self.min_stock_data
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞: {str(e)}")
            return pd.DataFrame()
    
    def generate_orders(self, safety_factor: float = 1.2, 
                       package_multiples: Dict = None) -> pd.DataFrame:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—á–µ—Ç–æ–≤"""
        if self.min_stock_data is None or self.min_stock_data.empty:
            return pd.DataFrame()
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            orders_df = self.processor.generate_order_list(
                self.min_stock_data, safety_factor
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if package_multiples:
                orders_df = self.processor.apply_package_multiples(
                    orders_df, package_multiples
                )
            
            self.orders_data = orders_df
            return orders_df
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
            return pd.DataFrame()
    
    def export_results(self) -> io.BytesIO:
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel"""
        if self.orders_data is None or self.orders_data.empty:
            return None
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = self.processor.export_results(
                self.orders_data,
                self.category_analysis,
                self.space_distribution
            )
            
            output = io.BytesIO()
            
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –∑–∞–∫–∞–∑–∞–º–∏
                export_data['orders'].to_excel(writer, sheet_name='Orders', index=False)
                
                # –õ–∏—Å—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if 'category_analysis' in export_data:
                    export_data['category_analysis'].to_excel(
                        writer, sheet_name='Category_Analysis', index=True
                    )
                
                # –õ–∏—Å—Ç —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                if 'space_distribution' in export_data:
                    export_data['space_distribution'].to_excel(
                        writer, sheet_name='Space_Distribution', index=True
                    )
                
                # –õ–∏—Å—Ç —Å–æ —Å–≤–æ–¥–∫–æ–π
                summary_df = pd.DataFrame([export_data['summary']])
                summary_df.to_excel(writer, sheet_name='Summary', index=False)
            
            output.seek(0)
            return output
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(
        page_title="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤",
        page_icon="üì¶",
        layout="wide"
    )
    
    st.title("üì¶ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤")
    st.markdown("*–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –°–∞–Ω–∞—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è out-of-stock —Å–∏—Ç—É–∞—Ü–∏–π*")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    if 'system' not in st.session_state:
        st.session_state.system = InventoryAutomationSystem()
    
    system = st.session_state.system
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    with st.sidebar:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã")
        
        days_supply = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∑–∞–ø–∞—Å–∞",
            min_value=5,
            max_value=30,
            value=10,
            help="–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ–ª–∂–µ–Ω —Ö–≤–∞—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å"
        )
        
        safety_factor = st.slider(
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            min_value=1.0,
            max_value=2.0,
            value=1.2,
            step=0.1,
            help="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–≤–µ—Ä—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞"
        )
        
        st.markdown("---")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ —É–ø–∞–∫–æ–≤–∫–∏
        st.subheader("üéÅ –ö—Ä–∞—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏")
        use_package_multiples = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏")
        
        package_multiple_default = 1
        if use_package_multiples:
            package_multiple_default = st.number_input(
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å",
                min_value=1,
                max_value=50,
                value=4,
                help="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"
            )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    tab1, tab2, tab3, tab4 = st.tabs(["üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "üìä –ê–Ω–∞–ª–∏–∑", "üìã –ó–∞–∫–∞–∑—ã", "üì§ –≠–∫—Å–ø–æ—Ä—Ç"])
    
    with tab1:
        st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—Å—Ç—ã: ADS, Stock Balance, Min-Target"
        )
        
        if uploaded_file is not None:
            if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                    success = system.load_excel_data(uploaded_file)
                    
                    if success:
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                        st.session_state.data_loaded = True
    
    with tab2:
        st.header("–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        if hasattr(st.session_state, 'data_loaded') and st.session_state.data_loaded:
            if st.button("üìä –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                    # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    category_analysis = system.analyze_categories()
                    
                    if category_analysis:
                        st.session_state.category_analysis = category_analysis
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
                        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                        
                        categories_df = pd.DataFrame.from_dict(category_analysis, orient='index')
                        st.dataframe(categories_df, use_container_width=True)
                        
                        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                        space_dist = system.calculate_space_distribution(total_shelves)
                        
                        if space_dist:
                            st.session_state.space_distribution = space_dist
                            
                            st.subheader("üè™ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
                            space_df = pd.DataFrame.from_dict(space_dist, orient='index')
                            st.dataframe(space_df, use_container_width=True)
                            
                            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                            st.subheader("üìä –î–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
                            
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.write("**–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤**")
                                items_chart = pd.DataFrame({
                                    'Category': list(category_analysis.keys()),
                                    'Items': [data['item_count'] for data in category_analysis.values()]
                                })
                                st.bar_chart(items_chart.set_index('Category'))
                            
                            with col2:
                                st.write("**–ü–æ –æ–±—ä–µ–º—É –ø—Ä–æ–¥–∞–∂ (ADS)**")
                                sales_chart = pd.DataFrame({
                                    'Category': list(category_analysis.keys()),
                                    'ADS_Percentage': [data['ads_percentage'] for data in category_analysis.values()]
                                })
                                st.bar_chart(sales_chart.set_index('Category'))
        else:
            st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'")
    
    with tab3:
        st.header("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤")
        
        if hasattr(st.session_state, 'data_loaded') and st.session_state.data_loaded:
            if st.button("üìã –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã"):
                with st.spinner("–†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤..."):
                    # –†–∞—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤
                    min_stock_df = system.calculate_minimum_stock(days_supply)
                    
                    if not min_stock_df.empty:
                        st.session_state.min_stock_df = min_stock_df
                        
                        st.subheader("üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ –∑–∞–ø–∞—Å—ã")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20 –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                        preview_df = min_stock_df.head(20)
                        st.dataframe(preview_df, use_container_width=True)
                        
                        if len(min_stock_df) > 20:
                            st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ 20 –∏–∑ {len(min_stock_df)} –ø–æ–∑–∏—Ü–∏–π")
                        
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ —É–ø–∞–∫–æ–≤–∫–∏
                        package_multiples = None
                        if use_package_multiples:
                            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å—é –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
                            package_multiples = {}
                            if 'sku' in min_stock_df.columns:
                                for sku in min_stock_df['sku']:
                                    package_multiples[sku] = package_multiple_default
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
                        orders_df = system.generate_orders(safety_factor, package_multiples)
                        
                        if not orders_df.empty:
                            st.session_state.orders_df = orders_df
                            
                            st.subheader("üìã –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π", len(orders_df))
                            with col2:
                                total_qty = orders_df['order_quantity'].sum()
                                st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{total_qty:,.2f}")
                            with col3:
                                branches_count = orders_df['branch'].nunique()
                                st.metric("–§–∏–ª–∏–∞–ª–æ–≤", branches_count)
                            with col4:
                                categories_count = orders_df['category'].nunique()
                                st.metric("–ö–∞—Ç–µ–≥–æ—Ä–∏–π", categories_count)
                            
                            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
                            branch_summary = system.get_branch_summary()
                            if branch_summary:
                                st.subheader("üè™ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º")
                                branch_df = pd.DataFrame.from_dict(branch_summary, orient='index')
                                st.dataframe(branch_df, use_container_width=True)
                            
                            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                            st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
                            
                            # –§–∏–ª—å—Ç—Ä—ã
                            col1, col2 = st.columns(2)
                            with col1:
                                selected_branch = st.selectbox(
                                    "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª:",
                                    options=['–í—Å–µ'] + list(orders_df['branch'].unique())
                                )
                            with col2:
                                selected_category = st.selectbox(
                                    "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                    options=['–í—Å–µ'] + list(orders_df['category'].unique())
                                )
                            
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                            filtered_df = orders_df.copy()
                            if selected_branch != '–í—Å–µ':
                                filtered_df = filtered_df[filtered_df['branch'] == selected_branch]
                            if selected_category != '–í—Å–µ':
                                filtered_df = filtered_df[filtered_df['category'] == selected_category]
                            
                            st.dataframe(filtered_df, use_container_width=True)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                            if len(filtered_df) != len(orders_df):
                                st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_df)} –∏–∑ {len(orders_df)} –ø–æ–∑–∏—Ü–∏–π")
                        else:
                            st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞")
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã")
        else:
            st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'")
    
    with tab4:
        st.header("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if hasattr(st.session_state, 'orders_df') and not st.session_state.orders_df.empty:
            st.success("‚úÖ –ó–∞–∫–∞–∑—ã –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            orders_df = st.session_state.orders_df
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ", len(orders_df))
            with col2:
                if 'order_value' in orders_df.columns:
                    st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{orders_df['order_value'].sum():,.2f}")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            if st.button("üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å Excel —Ñ–∞–π–ª"):
                with st.spinner("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                    excel_buffer = system.export_results()
                    
                    if excel_buffer:
                        st.success("‚úÖ Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞
                        st.info("""
                        üìÅ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Ñ–∞–π–ª–∞:**
                        - **–í—Å–µ_–∑–∞–∫–∞–∑—ã**: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≤—Å–µ–º —Ñ–∏–ª–∏–∞–ª–∞–º
                        - **–ó–∞–∫–∞–∑—ã_[—Ñ–∏–ª–∏–∞–ª]**: –û—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
                        - **–°–≤–æ–¥–∫–∞_—Ñ–∏–ª–∏–∞–ª–æ–≤**: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
                        - **–ê–Ω–∞–ª–∏–∑_–∫–∞—Ç–µ–≥–æ—Ä–∏–π**: –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤  
                        - **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_–ø–æ–ª–æ–∫**: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                        - **–û–±—â–∞—è_—Å–≤–æ–¥–∫–∞**: –û–±—â–∞—è —Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        """)
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        st.download_button(
                            label="üíæ –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                            data=excel_buffer,
                            file_name=f"inventory_orders_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True
                        )
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏"):
                st.subheader("–†—É—á–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤")
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                if st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
                    st.warning("‚ö†Ô∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤")
                    
                    # –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if 'sku' in orders_df.columns:
                        selected_sku = st.selectbox(
                            "–í—ã–±–µ—Ä–∏—Ç–µ SKU –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                            options=orders_df['sku'].tolist()
                        )
                        
                        if selected_sku:
                            current_qty = orders_df[orders_df['sku'] == selected_sku]['order_quantity'].iloc[0]
                            new_qty = st.number_input(
                                f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {selected_sku}:",
                                min_value=0,
                                value=int(current_qty),
                                step=1
                            )
                            
                            if st.button("‚úèÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ"):
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –¥–∞–Ω–Ω—ã—Ö
                                idx = orders_df[orders_df['sku'] == selected_sku].index[0]
                                st.session_state.orders_df.at[idx, 'order_quantity'] = new_qty
                                
                                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞
                                if 'price' in orders_df.columns:
                                    price = orders_df.at[idx, 'price']
                                    st.session_state.orders_df.at[idx, 'order_value'] = new_qty * price
                                
                                st.success(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {selected_sku} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_qty}")
                                st.experimental_rerun()
        else:
            st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ó–∞–∫–∞–∑—ã'")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"):
        st.markdown("""
        ### –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:
        
        1. **–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö**: –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        2. **–ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º**: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        3. **–†–∞—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤**: ADS √ó –î–Ω–∏ –∑–∞–ø–∞—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        4. **–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
        5. **–≠–∫—Å–ø–æ—Ä—Ç –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º**: –û—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã Excel –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        6. **–†—É—á–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏**: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        
        ### –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∏–ª–∏–∞–ª—ã:
        - üè™ **–ö–∞–∑—ã–±–∞–µ–≤–∞** - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª–∏–∞–ª
        - üè™ **–ë–∞—Ä—ã—Å** - —Ñ–∏–ª–∏–∞–ª –ë–∞—Ä—ã—Å
        - üè™ **–ê—Å—Ç–∞–Ω–∞** - —Ñ–∏–ª–∏–∞–ª –≤ –ê—Å—Ç–∞–Ω–µ
        - üè™ **–®—ã–º–∫–µ–Ω—Ç** - —Ñ–∏–ª–∏–∞–ª –≤ –®—ã–º–∫–µ–Ω—Ç–µ
        
        ### –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤:
        - **–ù–µ—Å–Ω–∏–∂–∞–µ–º—ã–π –∑–∞–ø–∞—Å** = ADS —Ñ–∏–ª–∏–∞–ª–∞ √ó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∑–∞–ø–∞—Å–∞
        - **–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞** = –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å - –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
        - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –∑–∞–∫–∞–∑—É** = –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å √ó –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        - **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞** –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–ª—è–º –ø—Ä–æ–¥–∞–∂ (ADS)
        
        ### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
        –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –ª–∏—Å—Ç—ã:
        - **"–º–∏–Ω –∑–∞–ø–∞—Å—ã"** - –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å ADS, –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∞—Å–∞–º–∏
        - **"–∞–¥—Å"** - –¥–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
        - **"–æ—Å—Ç"** - —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
        - **"–ø–æ–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"** - –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        """)

if __name__ == "__main__":
    main()