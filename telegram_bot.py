#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –°–∞–Ω–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram
"""

import logging
import os
import io
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from excel_processor import ExcelDataProcessor
from inventory_automation import InventoryAutomationSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å –æ—Ç @BotFather)
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')

class InventoryBot:
    """–ö–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏"""
    
    def __init__(self):
        self.user_systems = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–∏—Å—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_systems[user_id] = InventoryAutomationSystem()
        
        welcome_text = """
ü§ñ **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤**

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∑–∞–ø–∞—Å–∞–º–∏ –ø–æ –ª–æ–≥–∏–∫–µ –°–∞–Ω–∞—Ç–∞.

**–ß—Ç–æ —è —É–º–µ—é:**
üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
üìã –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏  
üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel
‚öôÔ∏è –£—á–∏—Ç—ã–≤–∞—Ç—å –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏

**–ö–∞–∫ –Ω–∞—á–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='upload')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è**

**1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö**
–í–∞—à Excel —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—Å—Ç—ã:
‚Ä¢ **ADS** - —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
‚Ä¢ **Stock Balance** - —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
‚Ä¢ **Min-Target** - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º

**2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –≤ —á–∞—Ç

**3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤** ‚öôÔ∏è
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∑–∞–ø–∞—Å–∞ (5-30)
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ö—Ä–∞—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏

**4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤**
–°–∏—Å—Ç–µ–º–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞  
‚Ä¢ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
‚Ä¢ Excel —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
/status - –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /settings"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = context.user_data.get('settings', {
            'days_supply': 10,
            'total_shelves': 786,
            'safety_factor': 1.2,
            'package_multiple': 4,
            'use_package_multiples': False
        })
        
        settings_text = f"""
‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**

üìÖ –î–Ω–µ–π –∑–∞–ø–∞—Å–∞: {settings['days_supply']}
üè™ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫: {settings['total_shelves']}
üõ°Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {settings['safety_factor']}
üì¶ –ö—Ä–∞—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏: {settings['package_multiple']}
‚úÖ –£—á–∏—Ç—ã–≤–∞—Ç—å –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å: {'–î–∞' if settings['use_package_multiples'] else '–ù–µ—Ç'}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:
        """
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –î–Ω–∏ –∑–∞–ø–∞—Å–∞", callback_data='set_days')],
            [InlineKeyboardButton("üè™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫", callback_data='set_shelves')],
            [InlineKeyboardButton("üõ°Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data='set_safety')],
            [InlineKeyboardButton("üì¶ –ö—Ä–∞—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏", callback_data='set_package')],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='reset_settings')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(settings_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_systems:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        system = self.user_systems[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        status_text = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if hasattr(system.processor, 'processed_data') and system.processor.processed_data:
            status_text += "‚úÖ **–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:**\n"
            for data_type in system.processor.processed_data.keys():
                df = system.processor.processed_data[data_type]
                status_text += f"‚Ä¢ {data_type.upper()}: {len(df)} –∑–∞–ø–∏—Å–µ–π\n"
        else:
            status_text += "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
        if system.category_analysis:
            status_text += f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(system.category_analysis)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        else:
            status_text += "\n‚ùå –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω\n"
        
        if system.orders_data is not None and not system.orders_data.empty:
            status_text += f"‚úÖ –ó–∞–∫–∞–∑—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã: {len(system.orders_data)} –ø–æ–∑–∏—Ü–∏–π\n"
        else:
            status_text += "‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        if hasattr(system.processor, 'processed_data') and system.processor.processed_data:
            keyboard.append([InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data='analyze')])
            keyboard.append([InlineKeyboardButton("üìã –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã", callback_data='generate_orders')])
        
        if system.orders_data is not None and not system.orders_data.empty:
            keyboard.append([InlineKeyboardButton("üì§ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data='export')])
        
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data='status')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(status_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_systems:
            self.user_systems[user_id] = InventoryAutomationSystem()
        
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not document.file_name.endswith(('.xlsx', '.xls')):
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)")
            return
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
            
            file = await context.bot.get_file(document.file_id)
            file_bytes = await file.download_as_bytearray()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
            temp_filename = f"temp_{user_id}_{document.file_name}"
            with open(temp_filename, 'wb') as f:
                f.write(file_bytes)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
            
            system = self.user_systems[user_id]
            structure_info = system.processor.load_excel_file(temp_filename)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            report = "‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!**\n\n"
            report += f"üìä **–ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤:** {len(structure_info)}\n\n"
            
            for sheet_name, info in structure_info.items():
                report += f"**{sheet_name}:**\n"
                report += f"‚Ä¢ –°—Ç—Ä–æ–∫: {info['rows']}\n"
                report += f"‚Ä¢ –ö–æ–ª–æ–Ω–æ–∫: {info['columns']}\n\n"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            processed_types = []
            
            try:
                ads_df = system.processor.process_ads_data()
                processed_types.append(f"‚úÖ ADS: {len(ads_df)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                processed_types.append(f"‚ö†Ô∏è ADS: {str(e)}")
            
            try:
                stock_df = system.processor.process_stock_data()
                processed_types.append(f"‚úÖ –û—Å—Ç–∞—Ç–∫–∏: {len(stock_df)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                processed_types.append(f"‚ö†Ô∏è –û—Å—Ç–∞—Ç–∫–∏: {str(e)}")
            
            try:
                target_df = system.processor.process_min_target_data()
                processed_types.append(f"‚úÖ Min-Target: {len(target_df)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                processed_types.append(f"‚ö†Ô∏è Min-Target: {str(e)}")
            
            report += "**–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
            report += "\n".join(processed_types)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data='analyze')],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
                [InlineKeyboardButton("üìã –°—Ç–∞—Ç—É—Å", callback_data='status')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(report, reply_markup=reply_markup, parse_mode='Markdown')
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(temp_filename)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        if user_id not in self.user_systems:
            self.user_systems[user_id] = InventoryAutomationSystem()
        
        system = self.user_systems[user_id]
        
        if query.data == 'help':
            await self.help_command(update, context)
        
        elif query.data == 'settings':
            await self.settings_command(update, context)
        
        elif query.data == 'status':
            await self.status_command(update, context)
        
        elif query.data == 'analyze':
            await self.analyze_categories(update, context, system)
        
        elif query.data == 'generate_orders':
            await self.generate_orders(update, context, system)
        
        elif query.data == 'export':
            await self.export_results(update, context, system)
        
        elif query.data.startswith('set_'):
            await self.handle_settings_change(update, context, query.data)
        
        elif query.data == 'reset_settings':
            await self.reset_settings(update, context)
    
    async def analyze_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE, system):
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            await update.callback_query.edit_message_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = context.user_data.get('settings', {'total_shelves': 786})
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_analysis = system.analyze_categories()
            
            if not category_analysis:
                await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            space_distribution = system.calculate_space_distribution(settings['total_shelves'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = "üìä **–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            report += f"**–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:** {len(category_analysis)}\n\n"
            
            # –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
            sorted_categories = sorted(category_analysis.items(), 
                                     key=lambda x: x[1]['item_count'], reverse=True)
            
            report += "**–¢–æ–ø-5 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:**\n"
            for i, (category, data) in enumerate(sorted_categories[:5], 1):
                report += f"{i}. {category}: {data['item_count']} —Ç–æ–≤–∞—Ä–æ–≤ ({data['percentage']:.1f}%)\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª–æ–∫
            if space_distribution:
                report += f"\n**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {settings['total_shelves']} –ø–æ–ª–æ–∫:**\n"
                sorted_space = sorted(space_distribution.items(), 
                                    key=lambda x: x[1]['shelves'], reverse=True)
                
                for category, data in sorted_space[:5]:
                    report += f"‚Ä¢ {category}: {data['shelves']} –ø–æ–ª–æ–∫\n"
            
            keyboard = [
                [InlineKeyboardButton("üìã –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã", callback_data='generate_orders')],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
                [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data='detailed_report')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(report, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
    
    async def generate_orders(self, update: Update, context: ContextTypes.DEFAULT_TYPE, system):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤"""
        try:
            await update.callback_query.edit_message_text("üîÑ –§–æ—Ä–º–∏—Ä—É—é –∑–∞–∫–∞–∑—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = context.user_data.get('settings', {
                'days_supply': 10,
                'safety_factor': 1.2,
                'package_multiple': 4,
                'use_package_multiples': False
            })
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã
            min_stock_df = system.calculate_minimum_stock(settings['days_supply'])
            
            if min_stock_df.empty:
                await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã")
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ —É–ø–∞–∫–æ–≤–∫–∏
            package_multiples = None
            if settings['use_package_multiples']:
                package_multiples = {}
                if 'sku' in min_stock_df.columns:
                    for sku in min_stock_df['sku']:
                        package_multiples[sku] = settings['package_multiple']
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
            orders_df = system.generate_orders(settings['safety_factor'], package_multiples)
            
            if orders_df.empty:
                await update.callback_query.edit_message_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = "üìã **–ó–∞–∫–∞–∑—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
            report += f"**–ü–æ–∑–∏—Ü–∏–π –∫ –∑–∞–∫–∞–∑—É:** {len(orders_df)}\n"
            report += f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {orders_df['order_quantity'].sum():,.0f}\n"
            
            if 'order_value' in orders_df.columns:
                total_value = orders_df['order_value'].sum()
                report += f"**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_value:,.2f}\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if 'category' in orders_df.columns:
                category_stats = orders_df.groupby('category')['order_quantity'].sum().head(5)
                report += "\n**–¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É:**\n"
                for category, qty in category_stats.items():
                    report += f"‚Ä¢ {category}: {qty:,.0f}\n"
            
            keyboard = [
                [InlineKeyboardButton("üì§ –°–∫–∞—á–∞—Ç—å Excel", callback_data='export')],
                [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='order_stats')],
                [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(report, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
    
    async def export_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, system):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel"""
        try:
            await update.callback_query.edit_message_text("üì§ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é Excel —Ñ–∞–π–ª...")
            
            if system.orders_data is None or system.orders_data.empty:
                await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
            excel_buffer = system.export_results()
            
            if not excel_buffer:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            excel_buffer.seek(0)
            filename = f"inventory_orders_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.xlsx"
            
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=excel_buffer,
                filename=filename,
                caption="üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤**\n\n" +
                       "**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:**\n" +
                       "‚Ä¢ Orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n" +
                       "‚Ä¢ Category_Analysis - –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n" +
                       "‚Ä¢ Space_Distribution - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞\n" +
                       "‚Ä¢ Summary - –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                parse_mode='Markdown'
            )
            
            await update.callback_query.edit_message_text("‚úÖ Excel —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    async def handle_settings_change(self, update: Update, context: ContextTypes.DEFAULT_TYPE, setting_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        
        instructions = {
            'set_days': "üìÖ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∑–∞–ø–∞—Å–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/set_days 15`",
            'set_shelves': "üè™ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/set_shelves 1000`",
            'set_safety': "üõ°Ô∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/set_safety 1.5`",
            'set_package': "üì¶ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/set_package 6`"
        }
        
        instruction = instructions.get(setting_type, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        await update.callback_query.edit_message_text(instruction, parse_mode='Markdown')
    
    async def reset_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        context.user_data['settings'] = {
            'days_supply': 10,
            'total_shelves': 786,
            'safety_factor': 1.2,
            'package_multiple': 4,
            'use_package_multiples': False
        }
        
        await update.callback_query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = InventoryBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("settings", bot.settings_command))
    application.add_handler(CommandHandler("status", bot.status_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Document.ALL, bot.handle_document))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == '__main__':
    main()